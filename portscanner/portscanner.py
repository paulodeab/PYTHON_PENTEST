#Scanner X Sweep: Scanner Enumera Serviços/Portas - Sweep busca uma porta em vários hosts. 
#TCP SCANNING - CONECTAR A UMA DETERMINADA PORTA: FUNÇÃO CONECT DO SO - THREE WAY HANDSHAKE
#SYN SCANNING - ENVIA UM PACOTE COM SYN E RECEBE O ACK, SYN PORÉM NÃO TERMINA A CONEXÃO.
#UDP SCANNING - DESCOBRE AS PORTAS FECHADAS, NÃO AS ABERTAS. DESCOBRE POR ELIMINAÇÃO.
#FIN SCANNING - ENVIA UM PACOTE COM FIN, A PORTA FECHADA RESPONDE COM RST, A ABERTA NÃO RESPONDE NADA.
#ICMP SCANNING - ENVIA UM PING OU ECHO. RÁPIDO.

import socket
import struct

def scan_tcp():
    port = 0
    ip = input("Digite o IP: ")
    while port < 65535:
        client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        client.settimeout(0.15)
        #Exibe um código de conexão - 0 significa conexão aceita
        response = client.connect_ex((ip, port))
        print(response)
        if response == 0:
            with open("result.txt", 'a') as data:
                data.write(f'{ip}:{port}\n')
        port=port+1
        client.close()

def scan_fin():
    ip = input("Digite o IP: ")
    for port in range(70, 82):
        client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        try:
            #Construir um cabeçalho TCP com a TAG FIN ativado
            tcp_header = struct.pack('!HHLLBBHHH', 0, 0, 0, 0, 0X50,0,0,0,0)
            client.connect((ip, port))
            response = client.send(tcp_header)
            if response != 0:
                print(f"Porta Aberta {port}")
        except Exception as ex:
              print(ex)  
scan_fin()

